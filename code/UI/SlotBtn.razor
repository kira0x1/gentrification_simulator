@using System
@inherits Sandbox.UI.Panel

<root class="slot-btn" onclick=@(() => OnClicked())>
    @{
        var btnClass = "inner-btn" + (IsOn ? " on" : " off");

        if (ButtonType == ButtonTypes.Toggle)
        {
            btnClass += " blue";
        }

        if (IsDisabled) btnClass += " disabled";
    }

    @{
        var btnStyle = BtnStyle == ButtonStyles.Material ? "" : $"background:url('icons/{Icon}')";
        var innerBtnClass = BtnStyle == ButtonStyles.Sprite ? "sprite" : "";
    }

    <div class=@btnClass>
        @if (Icon != null)
        {
            <button style=@btnStyle class=@innerBtnClass>
                @if (Label != null)
                {
                    <div class="key">@Label</div>
                }

                @if (BtnStyle == ButtonStyles.Material)
                {
                    <i>@Icon</i>
                }
            </button>
        }
    </div>
</root>

@code
{
    public enum ButtonTypes
    {
        Normal,
        Toggle
    }

    public enum ButtonStyles
    {
        Material,
        Sprite
    }

    public bool IsOn { get; set; }
    public ButtonTypes ButtonType { get; set; }
    public ButtonStyles BtnStyle { get; set; }
    public string Label { get; set; }
    public string Icon { get; set; }
    public Action OnClickAction { get; set; }
    public bool IsDisabled { get; set; }

    private void OnClicked()
    {
        if (ButtonType == ButtonTypes.Toggle)
        {
            IsOn = !IsOn;
        }

        OnClickAction?.Invoke();
    }

    protected override int BuildHash() => HashCode.Combine(Icon, Label, IsOn, IsDisabled);
}